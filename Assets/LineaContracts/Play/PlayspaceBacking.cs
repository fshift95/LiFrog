//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : MetaMask Unity SDK ABI Code Generator
//   Input filename:  Playspace.sol
//   Output filename: PlayspaceBacking.cs
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#if UNITY_EDITOR || !ENABLE_MONO
using System;
using System.Numerics;
using System.Threading.Tasks;
using evm.net;
using evm.net.Models;

namespace Playspace
{
	public class PlayspaceBacking : Contract, Playspace
	{
		public string Address
		{
			get => base.Address;
		}
		public PlayspaceBacking(IProvider provider, EvmAddress address, Type interfaceType) : base(provider, address, interfaceType)
		{
		}
		[EvmMethodInfo(Name = "addplayer", View = false)]
		public Task<Transaction> Addplayer(EvmAddress userAddress, String name, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { userAddress, name, options });
		}
		
		[EvmMethodInfo(Name = "sendBalance", View = false)]
		public Task<Transaction> SendBalance(EvmAddress userAddress, BigInteger balanceToAdd, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { userAddress, balanceToAdd, options });
		}
		
		[EvmMethodInfo(Name = "setScore", View = false)]
		public Task<Transaction> SetScore(EvmAddress userAddress, BigInteger score, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { userAddress, score, options });
		}
		
		public Task<Playspace> DeployNew()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Playspace>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "getPlayer", View = true)]
		public Task<String> GetPlayer(EvmAddress userAddress, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<String>) InvokeMethod(method, new object[] { userAddress, options });
		}
		
		[EvmMethodInfo(Name = "getScore", View = true)]
		public Task<BigInteger> GetScore(EvmAddress userAddress, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] { userAddress, options });
		}
		
	}
}
#endif
